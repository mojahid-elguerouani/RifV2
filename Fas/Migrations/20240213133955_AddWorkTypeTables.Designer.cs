// <auto-generated />
using System;
using FasDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240213133955_AddWorkTypeTables")]
    partial class AddWorkTypeTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChatApp.Domain.Entity.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FromUserID");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Message");

                    b.Property<string>("Status");

                    b.Property<string>("ToUserID");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<DateTime>("ViewedOn");

                    b.HasKey("ChatMessageID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ChatApp.Domain.Entity.FriendMapping", b =>
                {
                    b.Property<int>("FriendMappingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EndUserID");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RequestStatus");

                    b.Property<string>("RequestorUserID");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("FriendMappingID");

                    b.ToTable("FriendMappings");
                });

            modelBuilder.Entity("ChatApp.Domain.Entity.OnlineUser", b =>
                {
                    b.Property<int>("OnlineUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsOnline");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserID");

                    b.HasKey("OnlineUserID");

                    b.ToTable("OnlineUsers");
                });

            modelBuilder.Entity("ChatApp.Domain.Entity.UserImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsProfilePicture");

                    b.Property<string>("UserID");

                    b.HasKey("ImageID");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("ChatApp.Domain.Entity.UserNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FromUserID");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NotificationType");

                    b.Property<string>("Status");

                    b.Property<string>("ToUserID");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("NotificationID");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Fas.ProjectModel.ApprovedPlates", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Statement");

                    b.HasKey("WorkId");

                    b.ToTable("ApprovedPlates");
                });

            modelBuilder.Entity("Fas.ProjectModel.Building", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Statement");

                    b.HasKey("WorkId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Fas.ProjectModel.Floor", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Statement");

                    b.HasKey("WorkId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Fas.ProjectModel.RequiredExaminationDate", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Statement");

                    b.HasKey("WorkId");

                    b.ToTable("RequiredExaminationDate");
                });

            modelBuilder.Entity("Fas.ProjectModel.WorkToBeExamined", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Statement");

                    b.HasKey("WorkId");

                    b.ToTable("WorkToBeExamined");
                });

            modelBuilder.Entity("FasDemo.Models.AllowanceType", b =>
                {
                    b.Property<string>("AllowanceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("AllowanceTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AllowanceType");
                });

            modelBuilder.Entity("FasDemo.Models.BenefitTemplate", b =>
                {
                    b.Property<string>("BenefitTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("BenefitTemplateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BenefitTemplate");
                });

            modelBuilder.Entity("FasDemo.Models.BenefitTemplateLine", b =>
                {
                    b.Property<string>("BenefitTemplateLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllowanceTypeId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitTemplateId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("DeductionTypeId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("BenefitTemplateLineId");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("BenefitTemplateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BenefitTemplateLine");
                });

            modelBuilder.Entity("FasDemo.Models.DeductionType", b =>
                {
                    b.Property<string>("DeductionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("DeductionTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DeductionType");
                });

            modelBuilder.Entity("FasDemo.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("FasDemo.Models.Designation", b =>
                {
                    b.Property<string>("DesignationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("DesignationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("FasDemo.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<string>("AccountTitle")
                        .IsRequired();

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<string>("BankName")
                        .IsRequired();

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitTemplateId");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("DepartmentId")
                        .IsRequired();

                    b.Property<string>("DesignationId")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmployeeIDNumber");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LeavingDate");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired();

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("StateProvince")
                        .IsRequired();

                    b.Property<string>("SupervisorId");

                    b.Property<string>("SwiftCode");

                    b.Property<string>("SystemUserId");

                    b.Property<decimal>("UnpaidLeavePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<string>("ZipCode");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BenefitTemplateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FasDemo.Models.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("OperationType");

                    b.HasKey("LogId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("FasDemo.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgentId");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsSolve");

                    b.Property<string>("OnBehalfId")
                        .IsRequired();

                    b.Property<string>("ParentTicketThreadId");

                    b.Property<string>("SolutionNote");

                    b.Property<DateTimeOffset>("SubmitDate");

                    b.Property<string>("TicketName")
                        .IsRequired();

                    b.Property<string>("TicketTypeId")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("TicketId");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OnBehalfId");

                    b.HasIndex("ParentTicketThreadId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("FasDemo.Models.TicketType", b =>
                {
                    b.Property<string>("TicketTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("TicketTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TicketType");
                });

            modelBuilder.Entity("FasDemo.Models.Todo", b =>
                {
                    b.Property<string>("TodoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<bool>("IsDone");

                    b.Property<string>("OnBehalfId")
                        .IsRequired();

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<string>("TodoItem")
                        .IsRequired();

                    b.Property<string>("TodoTypeId")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("TodoId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OnBehalfId");

                    b.HasIndex("TodoTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("FasDemo.Models.TodoType", b =>
                {
                    b.Property<string>("TodoTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("TodoTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TodoType");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.CommentImage", b =>
                {
                    b.Property<int>("CommentImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentImageUrl");

                    b.Property<string>("FileName");

                    b.Property<string>("ImageType");

                    b.Property<int>("ProjectCommentId");

                    b.HasKey("CommentImageId");

                    b.HasIndex("ProjectCommentId");

                    b.ToTable("CommentImage");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ProjectComment", b =>
                {
                    b.Property<int>("ProjectCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CommentFromId");

                    b.Property<string>("CommentToId");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("ProjectCommentId");

                    b.HasIndex("CommentFromId");

                    b.HasIndex("CommentToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ProjectComment");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ReceiveBusinessComment", b =>
                {
                    b.Property<int>("ReceiveBusinessCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CommentFromId");

                    b.Property<string>("CommentToId");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<int>("PurchaseId");

                    b.Property<int?>("ReceiveBusinessId");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("ReceiveBusinessCommentId");

                    b.HasIndex("CommentFromId");

                    b.HasIndex("CommentToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReceiveBusinessId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusinessComment");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ReceiveBusinessCommentImage", b =>
                {
                    b.Property<int>("ReceiveBusinessCommentImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentImageUrl");

                    b.Property<string>("FileName");

                    b.Property<string>("ImageType");

                    b.Property<int>("PurchaseCommentId");

                    b.Property<int?>("ReceiveBusinessCommentId");

                    b.HasKey("ReceiveBusinessCommentImageId");

                    b.HasIndex("ReceiveBusinessCommentId");

                    b.ToTable("ReceiveBusinessCommentImages");
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChoiceText");

                    b.Property<int>("QuestionId");

                    b.Property<string>("SurveyId");

                    b.Property<int>("orderid");

                    b.HasKey("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerType");

                    b.Property<string>("QuestionBody");

                    b.Property<string>("SurveyId");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChoiceId");

                    b.Property<string>("ChoiceText");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("QuestionId");

                    b.Property<string>("ResponseId");

                    b.Property<string>("SurveyId");

                    b.HasKey("Id");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Survey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectManagment.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsApproved");

                    b.Property<string>("ProjectId");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ProjectManagment.Models.Contractor", b =>
                {
                    b.Property<string>("ContractorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContractorCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContractorUserId");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("ContractorId");

                    b.HasIndex("ContractorUserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("ProjectManagment.Models.ContractorImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId");

                    b.Property<string>("ContractorId1");

                    b.Property<string>("ContractorImageUrl");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId1");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ContractorImages");
                });

            modelBuilder.Entity("ProjectManagment.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("End");

                    b.Property<bool>("IsFullDay");

                    b.Property<DateTime>("Start");

                    b.Property<string>("Subject")
                        .HasMaxLength(100);

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(10);

                    b.Property<string>("UserId");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProjectManagment.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractorId")
                        .IsRequired();

                    b.Property<int?>("ContractualBudget");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("EstimatedBudget");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProjectDescription");

                    b.Property<string>("ProjectManagementConsultantId")
                        .IsRequired();

                    b.Property<string>("ProjectName")
                        .HasMaxLength(50);

                    b.Property<int>("Region");

                    b.Property<int>("Sector");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StatusId");

                    b.Property<string>("SupervisionConsultantId")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("ProjectId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectManagementConsultantId");

                    b.HasIndex("SupervisionConsultantId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusiness", b =>
                {
                    b.Property<int>("ReceiveBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractorSignature");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("ReceiveBusinessDate");

                    b.Property<string>("ReceiveBusinessSchedualTempletId")
                        .IsRequired();

                    b.Property<int>("ReviewNumber");

                    b.Property<int>("SerialNumber");

                    b.Property<string>("Specialization");

                    b.Property<int?>("StatusId");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<int>("WorkId");

                    b.HasKey("ReceiveBusinessId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReceiveBusinessSchedualTempletId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusiness");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessSchedual", b =>
                {
                    b.Property<int>("ReceiveBusinessSchedualId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("ReceiveBusinessApprovedById");

                    b.Property<string>("ReceiveBusinessAssignToId");

                    b.Property<int?>("ReceiveBusinessSchedualParentId");

                    b.Property<string>("ReceiveBusinessSchedualTempletId");

                    b.Property<string>("TaskName");

                    b.Property<int?>("TaskOrder");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<string>("toEmail");

                    b.HasKey("ReceiveBusinessSchedualId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReceiveBusinessApprovedById");

                    b.HasIndex("ReceiveBusinessAssignToId");

                    b.HasIndex("ReceiveBusinessSchedualParentId");

                    b.HasIndex("ReceiveBusinessSchedualTempletId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusinessScheduals");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessSchedualTemplet", b =>
                {
                    b.Property<string>("ReceiveBusinessSchedualTempletId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("ReceiveBusinessSchedualTempletName")
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("ReceiveBusinessSchedualTempletId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusinessSchedualTemplets");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTask", b =>
                {
                    b.Property<int>("ReceiveBusinessTaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<string>("ApprovedById");

                    b.Property<int?>("Compleation");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<int?>("GroupId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsApproved");

                    b.Property<string>("ReceiveBusinessAssignToId");

                    b.Property<int>("ReceiveBusinessId");

                    b.Property<int?>("StatusId");

                    b.Property<int>("TaskId");

                    b.Property<string>("TaskName");

                    b.Property<int?>("TaskOrder");

                    b.Property<int?>("TaskParentId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.Property<string>("toEmail");

                    b.HasKey("ReceiveBusinessTaskId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReceiveBusinessAssignToId");

                    b.HasIndex("ReceiveBusinessId");

                    b.HasIndex("TaskParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusinessTasks");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTaskLog", b =>
                {
                    b.Property<int>("ReceiveBusinessTaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ReceiveBusinessTaskComment");

                    b.Property<int>("ReceiveBusinessTaskId");

                    b.Property<string>("ReceiveBusinessUserId");

                    b.HasKey("ReceiveBusinessTaskLogId");

                    b.HasIndex("ReceiveBusinessTaskId");

                    b.HasIndex("ReceiveBusinessUserId");

                    b.ToTable("ReceiveBusinessTaskLog");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTaskLogImage", b =>
                {
                    b.Property<int>("ReceiveBusinessTaskLogImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("CreatedById");

                    b.Property<string>("FileName");

                    b.Property<string>("ImageType");

                    b.Property<int>("ReceiveBusinessTaskLogId");

                    b.Property<string>("ReceiveBusinessTaskLogImageUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAtUtc");

                    b.Property<string>("UpdatedById");

                    b.HasKey("ReceiveBusinessTaskLogImageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReceiveBusinessTaskLogId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ReceiveBusinessTaskLogImages");
                });

            modelBuilder.Entity("FasDemo.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("isSuperAdmin");

                    b.Property<int>("userType");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("FasDemo.Models.AllowanceType", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.BenefitTemplate", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.BenefitTemplateLine", b =>
                {
                    b.HasOne("FasDemo.Models.AllowanceType", "AllowanceType")
                        .WithMany()
                        .HasForeignKey("AllowanceTypeId");

                    b.HasOne("FasDemo.Models.BenefitTemplate", "BenefitTemplate")
                        .WithMany("Lines")
                        .HasForeignKey("BenefitTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.DeductionType", "DeductionType")
                        .WithMany()
                        .HasForeignKey("DeductionTypeId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.DeductionType", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.Department", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.Designation", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.Employee", b =>
                {
                    b.HasOne("FasDemo.Models.BenefitTemplate", "BenefitTemplate")
                        .WithMany()
                        .HasForeignKey("BenefitTemplateId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.Ticket", b =>
                {
                    b.HasOne("FasDemo.Models.Employee", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.Employee", "OnBehalf")
                        .WithMany()
                        .HasForeignKey("OnBehalfId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.Ticket", "ParentTicketThread")
                        .WithMany()
                        .HasForeignKey("ParentTicketThreadId");

                    b.HasOne("FasDemo.Models.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.TicketType", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.Todo", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.Employee", "OnBehalf")
                        .WithMany()
                        .HasForeignKey("OnBehalfId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.TodoType", "TodoType")
                        .WithMany()
                        .HasForeignKey("TodoTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.Models.TodoType", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.CommentImage", b =>
                {
                    b.HasOne("FasDemo.ProjectModel.ProjectComment", "ProjectComment")
                        .WithMany("CommentImages")
                        .HasForeignKey("ProjectCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ProjectComment", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CommentFrom")
                        .WithMany()
                        .HasForeignKey("CommentFromId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CommentTo")
                        .WithMany()
                        .HasForeignKey("CommentToId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ProjectManagment.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ReceiveBusinessComment", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CommentFrom")
                        .WithMany()
                        .HasForeignKey("CommentFromId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CommentTo")
                        .WithMany()
                        .HasForeignKey("CommentToId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ProjectManagment.Models.ReceiveBusiness", "ReceiveBusiness")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("FasDemo.ProjectModel.ReceiveBusinessCommentImage", b =>
                {
                    b.HasOne("FasDemo.ProjectModel.ReceiveBusinessComment", "ReceiveBusinessComment")
                        .WithMany("ReceiveBusinessCommentImages")
                        .HasForeignKey("ReceiveBusinessCommentId");
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Choice", b =>
                {
                    b.HasOne("FasDemo.SurveyModel.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FasDemo.SurveyModel.Question", b =>
                {
                    b.HasOne("FasDemo.SurveyModel.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectManagment.Models.Attachment", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.Contractor", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "ContractorUser")
                        .WithMany()
                        .HasForeignKey("ContractorUserId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ContractorImage", b =>
                {
                    b.HasOne("ProjectManagment.Models.Contractor", "Contractor")
                        .WithMany("ContractorImages")
                        .HasForeignKey("ContractorId1");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.Project", b =>
                {
                    b.HasOne("ProjectManagment.Models.Contractor", "Contractor")
                        .WithMany("ContractorProjects")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.Employee", "ProjectManagementConsultant")
                        .WithMany()
                        .HasForeignKey("ProjectManagementConsultantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.Employee", "SupervisionConsultant")
                        .WithMany()
                        .HasForeignKey("SupervisionConsultantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusiness", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ProjectManagment.Models.Project", "Project")
                        .WithMany("ReceiveBusiness")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ProjectManagment.Models.ReceiveBusinessSchedualTemplet", "ReceiveBusinessSchedualTemplet")
                        .WithMany("ReceiveBusiness")
                        .HasForeignKey("ReceiveBusinessSchedualTempletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessSchedual", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "ReceiveBusinessApprovedBy")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessApprovedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "ReceiveBusinessAssignTo")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessAssignToId");

                    b.HasOne("ProjectManagment.Models.ReceiveBusinessSchedual", "ReceiveBusinessSchedualParent")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessSchedualParentId");

                    b.HasOne("ProjectManagment.Models.ReceiveBusinessSchedualTemplet", "ReceiveBusinessSchedualTemplet")
                        .WithMany("ReceiveBusinessScheduals")
                        .HasForeignKey("ReceiveBusinessSchedualTempletId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessSchedualTemplet", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTask", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("FasDemo.Models.ApplicationUser", "ReceiveBusinessAssignTo")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessAssignToId");

                    b.HasOne("ProjectManagment.Models.ReceiveBusiness", "ReceiveBusiness")
                        .WithMany("ReceiveBusinessTasks")
                        .HasForeignKey("ReceiveBusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectManagment.Models.ReceiveBusinessTask", "TaskParent")
                        .WithMany("Children")
                        .HasForeignKey("TaskParentId");

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTaskLog", b =>
                {
                    b.HasOne("ProjectManagment.Models.ReceiveBusinessTask", "ReceiveBusinessTask")
                        .WithMany("ReceiveBusinessTaskLogs")
                        .HasForeignKey("ReceiveBusinessTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "ReceiveBusinessUser")
                        .WithMany()
                        .HasForeignKey("ReceiveBusinessUserId");
                });

            modelBuilder.Entity("ProjectManagment.Models.ReceiveBusinessTaskLogImage", b =>
                {
                    b.HasOne("FasDemo.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ProjectManagment.Models.ReceiveBusinessTaskLog", "ReceiveBusinessTaskLog")
                        .WithMany("ReceiveBusinessTaskLogImages")
                        .HasForeignKey("ReceiveBusinessTaskLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FasDemo.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
